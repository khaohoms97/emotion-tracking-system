var ClientID = 'Replace with your ClientID';
var ClientSecret = 'Replace with your ClientSecret';

function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Google Fit')
      .addItem('Authorize if needed (does nothing if already authorized)', 'showSidebar')
      .addItem('Get Metrics for Now', 'getMetrics')
      .addItem('Get Metrics for past 60 days', 'getHistory')
      .addItem('Reset Settings', 'clearProps')
      .addToUi();
}

function getMetrics() {
  Logger.log('getMetrics called at: ' + new Date());
  getMetricsForDays(0, 0, 'Metrics');
}


function getHistory() {
  getMetricsForHistory(0, 60, 'History');
}

function getMetricsForDays(fromDaysAgo, toDaysAgo, tabName) {
  var startDate = new Date();
  startDate.setHours(0,0,0,0);
  startDate.setDate(startDate.getDate() - toDaysAgo);

  var endDate = new Date();
  endDate.setHours(23,59,59,999);
  endDate.setDate(endDate.getDate() - fromDaysAgo);

  var fitService = getFitService();
  var request = {
    "aggregateBy": [
      {
        "dataTypeName": "com.google.step_count.delta",
        "dataSourceId": "derived:com.google.step_count.delta:com.google.android.gms:estimated_steps"
      },
      {
        "dataTypeName": "com.google.weight.summary",
        "dataSourceId": "derived:com.google.weight:com.google.android.gms:merge_weight"
      },
      {
        "dataTypeName": "com.google.distance.delta",
        "dataSourceId": "derived:com.google.distance.delta:com.google.android.gms:merge_distance_delta"
      },
      {
        "dataTypeName": "com.google.heart_rate.summary",
        "dataSourceId": "derived:com.google.heart_rate.bpm:com.google.android.gms:merge_heart_rate_bpm"
      }
    ],
    "bucketByTime": { "durationMillis": 86400000 },
    "startTimeMillis": startDate.getTime(),
    "endTimeMillis": endDate.getTime()
  };


  
  var response = UrlFetchApp.fetch('https://www.googleapis.com/fitness/v1/users/me/dataset:aggregate', {
    headers: {
      Authorization: 'Bearer ' + fitService.getAccessToken()
    },
    'method' : 'post',
    'contentType' : 'application/json',
    'payload' : JSON.stringify(request, null, 2)
  });
  
  var json = JSON.parse(response.getContentText());
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(tabName);
  
  for(var b = 0; b < json.bucket.length; b++) {
    // each bucket in our response should be a day
    var currentTime = new Date();

    var steps = -1;
    var weight = -1;
    var distance = -1;
    var heartRate = -1;
    
  if (json.bucket[b].dataset[0].point.length > 0) {
    steps = json.bucket[b].dataset[0].point[0].value[0].intVal;
  }
  if (json.bucket[b].dataset[1].point.length > 0) {
    weight = json.bucket[b].dataset[1].point[0].value[0].fpVal;
  }
  if (json.bucket[b].dataset[2].point.length > 0) {
    distance = json.bucket[b].dataset[2].point[0].value[0].fpVal;
  }
  if (json.bucket[b].dataset[3].point.length > 0) {
    heartRate = json.bucket[b].dataset[3].point[0].value[0].fpVal;
  }
    
    sheet.appendRow([currentTime, 
                     steps == -1 ? ' ' : steps, 
                     weight == -1 ? ' ' : weight, 
                     distance == -1 ? ' ' : distance,
                     heartRate == -1 ? ' ' : heartRate]);
  }
}

function getMetricsForHistory(fromDaysAgo, toDaysAgo, tabName) {
  var start = new Date();
  start.setHours(0,0,0,0);
  start.setDate(start.getDate() - toDaysAgo);

  var end = new Date();
  end.setHours(23,59,59,999);
  end.setDate(end.getDate() - fromDaysAgo);
  
  var fitService = getFitService();
  var request = {
    "aggregateBy": [
      {
        "dataTypeName": "com.google.step_count.delta",
        "dataSourceId": "derived:com.google.step_count.delta:com.google.android.gms:estimated_steps"
      },
      {
        "dataTypeName": "com.google.weight.summary",
        "dataSourceId": "derived:com.google.weight:com.google.android.gms:merge_weight"
      },
      {
        "dataTypeName": "com.google.distance.delta",
        "dataSourceId": "derived:com.google.distance.delta:com.google.android.gms:merge_distance_delta"
      },
      {
        "dataTypeName": "com.google.heart_rate.summary",
        "dataSourceId": "derived:com.google.heart_rate.bpm:com.google.android.gms:merge_heart_rate_bpm"
      }
    ],
    "bucketByTime": { "durationMillis": 86400000 },
    "startTimeMillis": start.getTime(),
    "endTimeMillis": end.getTime()
  };

  
  var response = UrlFetchApp.fetch('https://www.googleapis.com/fitness/v1/users/me/dataset:aggregate', {
    headers: {
      Authorization: 'Bearer ' + fitService.getAccessToken()
    },
    'method' : 'post',
    'contentType' : 'application/json',
    'payload' : JSON.stringify(request, null, 2)
  });
  
  var json = JSON.parse(response.getContentText());
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(tabName);
  
  for(var b = 0; b < json.bucket.length; b++) {
    // each bucket in our response should be a day
    var bucketDate = new Date(parseInt(json.bucket[b].startTimeMillis, 10));
    
    var steps = -1;
    var weight = -1;
    var distance = -1;
    var heartRate = -1;
    
  if (json.bucket[b].dataset[0].point.length > 0) {
    steps = json.bucket[b].dataset[0].point[0].value[0].intVal;
  }
  if (json.bucket[b].dataset[1].point.length > 0) {
    weight = json.bucket[b].dataset[1].point[0].value[0].fpVal;
  }
  if (json.bucket[b].dataset[2].point.length > 0) {
    distance = json.bucket[b].dataset[2].point[0].value[0].fpVal;
  }
  if (json.bucket[b].dataset[3].point.length > 0) {
    heartRate = json.bucket[b].dataset[3].point[0].value[0].fpVal;
  }
    
    sheet.appendRow([bucketDate, 
                     steps == -1 ? ' ' : steps, 
                     weight == -1 ? ' ' : weight, 
                     distance == -1 ? ' ' : distance,
                     heartRate == -1 ? ' ' : heartRate]);
  }
}

// functions below adapted from Google OAuth example at https://github.com/googlesamples/apps-script-oauth2

function getFitService() {
  var service = OAuth2.createService('fit')
    .setAuthorizationBaseUrl('https://accounts.google.com/o/oauth2/auth')
    .setTokenUrl('https://accounts.google.com/o/oauth2/token')
    .setClientId(ClientID)
    .setClientSecret(ClientSecret)
    .setCallbackFunction('authCallback')
    .setPropertyStore(PropertiesService.getUserProperties())
    .setScope('https://www.googleapis.com/auth/fitness.activity.read https://www.googleapis.com/auth/fitness.body.read https://www.googleapis.com/auth/fitness.location.read https://www.googleapis.com/auth/fitness.heart_rate.read')
    .setParam('login_hint', Session.getActiveUser().getEmail())
    .setParam('access_type', 'offline');

  // Add checkExpiration() function to automatically refresh the access token if it has expired
  // service.checkExpiration = function() {
  //   var token = this.getAccessToken();
  //   var expiration = this.getExpirationTime();
  //   if (expiration && expiration < Date.now()) {
  //     var response = UrlFetchApp.fetch('https://accounts.google.com/o/oauth2/token', {
  //       method: 'post',
  //       payload: {
  //         grant_type: 'refresh_token',
  //         client_id: this.getClientId(),
  //         client_secret: this.getClientSecret(),
  //         refresh_token: this.getRefreshToken()
  //       }
  //     });
  //     var content = JSON.parse(response.getContentText());
  //     this.setAccessToken(content.access_token);
  //     this.setExpirationTime(content.expires_in * 1000 + Date.now());
  //   }
  // };

  return service;
}


function showSidebar() {
  var fitService = getFitService();
  if (!fitService.hasAccess()) {
    var authorizationUrl = fitService.getAuthorizationUrl();
    var template = HtmlService.createTemplate(
        '<a href="<?= authorizationUrl ?>" target="_blank">Authorize</a>. ' +
        'Close this after you have finished.');
    template.authorizationUrl = authorizationUrl;
    var page = template.evaluate();
    SpreadsheetApp.getUi().showSidebar(page);
  } else {
  // ...
  }
}

function authCallback(request) {
  var fitService = getFitService();
  var isAuthorized = fitService.handleCallback(request);
  if (isAuthorized) {
    return HtmlService.createHtmlOutput('Success! You can close this tab.');
  } else {
    return HtmlService.createHtmlOutput('Denied. You can close this tab');
  }
}

function clearProps() {
  PropertiesService.getUserProperties().deleteAllProperties();
}

function sendEmail() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  
  // Set the email address you want to send the email to
  var recipient = "emotionaltrackingsystem@gmail.com";
  
  // Create the email message using the data in the spreadsheet
  var subject = "กรุณากรอกแบบสำรวจสภาพอารมณ์ผู้ใช้";
  var body = "ตอนนี้คุณกำลังรู้สึกอย่างไร? \nกรอกแบบสำรวจเพื่อบอกให้เรารู้ที่ \n https://forms.gle/2kkyBdoeDty5xYGNA";

  
  // Send the email
  GmailApp.sendEmail(recipient, subject, body);
}

function checkLatestValues() {
  var sheet = SpreadsheetApp.getActive().getActiveSheet();
  var lastBRow = sheet.getRange("B:B").getValues().filter(String).length;
  var lastFRow = sheet.getRange("F:F").getValues().filter(String).length;
  var bValue = sheet.getRange(lastBRow, 2).getValue();
  var fValue = sheet.getRange(lastFRow, 6).getValue();
  var lValue = sheet.getRange("L2").getValue();
  var mValue = sheet.getRange("M2").getValue();
  var nValue = sheet.getRange("N2").getValue();
  var oValue = sheet.getRange("O2").getValue();
  
 checkValues(bValue, fValue, lValue, mValue, nValue, oValue);
}

function checkValues(bValue, fValue, lValue, mValue, nValue, oValue) {
  if (bValue <= lValue + mValue && fValue > nValue + oValue) {
    alert();
  }
}

function alert() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  
  // Set the email address you want to send the email to
  var recipient = "emotionaltrackingsystem@gmail.com";
  
  // Create the email message using the data in the spreadsheet
  var subject = "ตรวจพบการเต้นของหัวใจที่ไม่ปกติ กรุณากรอกแบบสำรวจสภาพอารมณ์ผู้ใช้";
  var body = "ตอนนี้คุณกำลังรู้สึกอย่างไร? \nกรอกแบบสำรวจเพื่อบอกให้เรารู้ที่: \n https://forms.gle/2kkyBdoeDty5xYGNA";

  
  // Send the email
  GmailApp.sendEmail(recipient, subject, body);
}
